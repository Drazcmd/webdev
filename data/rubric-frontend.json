[
{"section":"Merits", "items": [
    {"item":"README.json file contains netid and URL to deployed frontend site", "pts":2},

{"item":"Test Actions: resource should be a resource (i.e., mock a request)", "pts": 2},
{"item":"Test Actions: resource should give me the http error", "pts": 2},
{"item":"Test Actions: resource should be POSTable", "pts": 2},
{"item":"Test Actions: should update error message (for displaying error mesage to user)", "pts": 2},
{"item":"Test Actions: should update success message (for displaying success message to user)", "pts": 2},
{"item":"Test Actions: should navigate (to profile, main, or landing)", "pts": 2},
{"item":"Test Auth: should log in a user", "pts": 2},
{"item":"Test Auth: should not log in an invalid user", "pts": 2},
{"item":"Test Auth: should log out a user (state should be cleared)", "pts": 2},
{"item":"Test Article: should fetch articles (mocked request)", "pts": 2},
{"item":"Test Article: should update the search keyword", "pts": 2},
{"item":"Test ArticleView: should render articles", "pts": 2},
{"item":"Test ArticleView: should dispatch actions to create a new article", "pts": 2},
{"item":"Test Profile: should fetch the user's proile information", "pts": 2},
{"item":"Test Profile: should update headline", "pts": 2},
{"item":"Test Reducer: should initialize state", "pts": 2},
{"item":"Test Reducer: should state success (for displaying success message to user)", "pts": 2},
{"item":"Test Reducer: should state error (for displaying error message to user)", "pts": 2},
{"item":"Test Reducer: should set the articles", "pts": 2},
{"item":"Test Reducer: should set the search keyword", "pts": 2},
{"item":"Test Reducer: should filter displayed articles by the search keyword", "pts": 2},

    {"item":"Valid test coverage report included in submission", "pts":3},

    {"item":"Landing: register new users", "pts":2},
    {"item":"Landing: users can log in with netID and three-word-passphrase", "pts":5},
    {"item":"Main: update headline persisting by dummy server", "pts":5},
    {"item":"Main: add user to follower list, new user's articles shown in feed", "pts":5},
    {"item":"Main: remove user from follower list, old user's articles are removed from feed", "pts":5},
    {"item":"Main: Suitable message when trying to add user that does not exist", "pts":3},
    {"item":"Main: each article has a list of comments displayed in a user friendly fashion", "pts":5},
    
    {"item":"Main: add new articles with text-only", "pts":10},
    {"item":"Main: new articles appear at top of feed when added and are persistent to refresh", "pts":3},

    {"item":"Profile: update email and zipcode with validation", "pts":5},
    {"item":"Profile: update passowrd (but is non persistent on dummy server)", "pts":5}

]},
{"section":"Demerits", "items": [
    {"item":"late submission 10pts per day", "pts": 10},
     
    {"item":"did not follow Redux tutorial in implementation details", "pts": 25},
    {"item":"stateful component", "pts":25},
    {"item":"business logic in component", "pts":20},
    {"item":"non-functional approach, e.g., for-loop, for-in, while", "pts": 15},
    {"item":"fat React component instead of simple function", "pts": 15},
    {"item":"did not use fetch or wrapped fetch (aka resource) for AJAX calls", "pts": 10},
    {"item":"state mutation", "pts": 10},
    
    {"item":"code smells bad or has some issue", "pts": 10},
    {"item":"sections of code repeated more than twice (i.e., it's not DRY code)", "pts": 10},
    {"item":"variable not appropriately scoped (i.e., in wrong scope)", "pts": 10},
    {"item":"did not properly separate concerns", "pts": 10},
    {"item":"user interface not obvious to use", "pts": 10},
    {"item":"a non-server error is thrown", "pts": 8},
    {"item":"lingering console message (outside possible React/Redux warnings)", "pts": 5},
    {"item":"Redux logging left on", "pts": 5},
    {"item":"usage of forceUpdate in React component", "pts": 5},
    {"item":"bad variable name", "pts": 5},

    {"item":"bad datastructure choice or usage", "pts": 5},
    {"item":"inappropriate use of new", "pts": 5},
    {"item":"improper use of comments", "pts": 5},
    {"item":"no comments at all (you should have describing comments to explain why you are doing things the way you are doing them)", "pts": 5},
    {"item":"dead code, e.g., commented or unreachable code", "pts": 5},
    {"item":"code makes unchecked assumption", "pts": 5},
    {"item":"non-CSS styling", "pts": 5},

    {"item":"inefficient algorithm", "pts": 5},
    {"item":"poor implementation", "pts": 5},
    {"item":"expensive network load", "pts": 5},
    {"item":"JavaScript file has too many lines of code (more than about 500 lines)", "pts": 5},
    {"item":"JavaScript file inappropriately has too few lines of code (should be at least 5 lines otherwise combine with another file)", "pts": 5},
    {"item":"function length is too long (more than about 60 lines)", "pts": 5},
    {"item":"function performs too many functions", "pts": 5},
    {"item":"complex code statement (should be broken up or is missing appropriate comment)", "pts": 5},

    {"item":"unnecessary intermixing of content (HTML) and style (CSS)", "pts": 5},
    {"item":"unnecessary intermixing of content (HTML) and logic (JavaScript)", "pts": 5},

    {"item":"inappropriate magic value", "pts": 3},
    {"item":"missing braces for blocks, e.g., if, for, while", "pts": 3},
    {"item":"bad indentation", "pts": 3},

    {"item":"poorly named function", "pts": 3},
    {"item":"missing cached variable, e.g., not caching DOM lookup", "pts": 3},
    {"item":"reassigning or multiply assigning variables", "pts": 3},
    {"item":"code line length too long (more than about 80 characters)", "pts": 3},
    {"item":"too much white space (use white space for logical separations and promote grouping)", "pts": 3},
    {"item":"excessive use of DOM ids", "pts": 3},
    {"item":"missing clear abstraction usage opportunity", "pts": 3},

    {"item":"for loop used instead of more appropriate functional style", "pts": 3},
    {"item":"variable not appropriately initialized", "pts": 3},
    {"item":"did not use shortcut for boolean, i.e., if (bool == true) should be if (bool)", "pts": 3},
    {"item":"inappropriate character in filename, e.g., space", "pts": 3},
    {"item":"a 'what' comment, e.g., // set var to 0", "pts": 3},

    {"item":"multi-line comment where // should be used instead", "pts": 1},
    {"item":"long comment at end of line instead of on separate line", "pts": 1}

]}

]
