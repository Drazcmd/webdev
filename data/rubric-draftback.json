[
{"section":"Merits", "items": [
    {"item":"README.json file with netid, frontend, and backend URLs", "pts":1},

    {"item":"Frontend: Site is hosted on Surge", "pts":1},
    {"item":"Frontend: Main: add new articles with text-only, or picture and text", "pts":10},
    {"item":"Frontend: Main: edit articles, add comments, edit comments, comments are persistent", "pts":10},
    {"item":"Frontend: Profile: upload new profile avatar", "pts":5},

    {"item":"End-to-End Test: Register new user", "pts":3},
    {"item":"End-to-End Test: login as test user", "pts":3},
    {"item":"End-to-End Test: Create new article and validate article appears in feed", "pts":3},
    {"item":"End-to-End Test: Edit an article and validate changed article text", "pts":10},
    {"item":"End-to-End Test: Update headline headline and verify change", "pts":3},
    {"item":"End-to-End Test: Add the 'Follower' user and verify following count increases by one", "pts":3},
    {"item":"End-to-End Test: Remove the Follower user and verify following count decreases by one, test should be safe, i.e., what if Follower is not being followed", "pts":3},
    {"item":"End-to-End Test: Search for special &quot;Only One Article Like This&quot; article and verify author", "pts":3},
    {"item":"End-to-End Test: Update user email and verify", "pts":3},
    {"item":"End-to-End Test: Update user zipcode and verify", "pts":3},
    {"item":"End-to-End Test: Update user password and verify", "pts":3},
    {"item":"End-to-End Test: valid JUnitXML test results for frontend", "pts":3},

    {"item":"Backend: Site is hosted on Heroku", "pts":1},
    {"item":"Backend: GET /headlines returns the headline message for the default logged in user", "pts":1},
    {"item":"Backend: PUT /headline updates the headline message GET /headlines returns", "pts":1},
    {"item":"Backend: GET /headlines/:users returns default headline messages one for each requested user", "pts":1},
    {"item":"Backend: GET /articles returns at least three articles", "pts":1},
    {"item":"Backend: POST /article returns a newly added article, and adds article to results for GET /articles", "pts":1},
    {"item":"Backend: GET /articles/:idOrUser returns the desired article by article id or user", "pts":1},
    {"item":"Backend: implement GET /articles and GET /articles/:id as one endpoint not two", "pts": 1},

    {"item":"Backend: GET /email/:user? returns default email for requested user, or default user", "pts": 1},
    {"item":"Backend: PUT /email updates value for default user", "pts": 1},
    {"item":"Backend: GET /zipcode/:user? returns default zipcode for requested user, or default user", "pts": 1},
    {"item":"Backend: PUT /zipcode updates value for default user", "pts": 1},
    {"item":"Backend: GET /avatars/:user? returns default url for requested user, or default user", "pts": 1},
    {"item":"Backend: Stub: PUT /avatar", "pts": 1},

    {"item":"Backend: Stub: GET /dob", "pts": 1},
    {"item":"Backend: Stub: POST /login", "pts": 1},
    {"item":"Backend: Stub: POST /register", "pts": 1},
    {"item":"Backend: Stub: PUT /logout", "pts": 1},
    {"item":"Backend: Stub: PUT /articles/id", "pts":1},
    {"item":"Backend: Stub: GET /following/:user?", "pts":1},
    {"item":"Backend: Stub: PUT /following/:user", "pts":1},
    {"item":"Backend: Stub: DELETE /following/:user", "pts":1},

    {"item":"Backend: Unit test to validate PUT /headline", "pts": 2},
    {"item":"Backend: Unit test to validate POST /article", "pts": 2},
    {"item":"Backend: valid JUnitXML test results for backend", "pts":4}
]},
{"section":"Demerits", "items": [
    {"item":"late submission 10pts per day", "pts": 10},
    {"item":"followed directions in repo submission", "pts": 5},
    {"item":"unapproved module or JavaScript library", "pts": 25},

    {"item":"did not follow Redux tutorial in implementation details", "pts": 25},
    {"item":"stateful component", "pts":25},
    {"item":"business logic in component", "pts":20},
    {"item":"non-functional approach, e.g., for-loop, for-in, while", "pts": 15},
    {"item":"fat React component instead of simple function", "pts": 15},
    {"item":"did not use fetch or wrapped fetch (aka resource) for AJAX calls", "pts": 10},
    {"item":"state mutation", "pts": 10},
    {"item":"submitted .git or node_modules directory", "pts":10},
    {"item":"submitted bundle.js file", "pts":10},
    {"item":"refreshing the page when logged in should keep the user logged in", "pts":10},
    
    {"item":"code smells bad or has some issue", "pts": 10},
    {"item":"sections of code repeated more than twice (i.e., it's not DRY code)", "pts": 10},
    {"item":"variable not appropriately scoped (i.e., in wrong scope)", "pts": 10},
    {"item":"did not properly separate concerns", "pts": 10},
    {"item":"user interface not obvious to use", "pts": 10},
    {"item":"a non-server error is thrown", "pts": 8},
    {"item":"lingering console message (outside possible React/Redux warnings)", "pts": 5},
    {"item":"Redux logging left on", "pts": 5},
    {"item":"usage of forceUpdate in React component", "pts": 5},
    {"item":"bad variable name", "pts": 5},

    {"item":"bad datastructure choice or usage", "pts": 5},
    {"item":"inappropriate use of new", "pts": 5},
    {"item":"improper use of comments", "pts": 5},
    {"item":"no comments at all (you should have describing comments to explain why you are doing things the way you are doing them)", "pts": 5},
    {"item":"dead code, e.g., commented or unreachable code", "pts": 5},
    {"item":"code makes unchecked assumption", "pts": 5},
    {"item":"non-CSS styling", "pts": 5},

    {"item":"inefficient algorithm", "pts": 5},
    {"item":"poor implementation", "pts": 5},
    {"item":"expensive network load", "pts": 5},
    {"item":"JavaScript file has too many lines of code (more than about 500 lines)", "pts": 5},
    {"item":"JavaScript file inappropriately has too few lines of code (should be at least 5 lines otherwise combine with another file)", "pts": 5},
    {"item":"function length is too long (more than about 60 lines)", "pts": 5},
    {"item":"function performs too many functions", "pts": 5},
    {"item":"complex code statement (should be broken up or is missing appropriate comment)", "pts": 5},

    {"item":"unnecessary intermixing of content (HTML) and style (CSS)", "pts": 5},
    {"item":"unnecessary intermixing of content (HTML) and logic (JavaScript)", "pts": 5},

    {"item":"inappropriate magic value", "pts": 3},
    {"item":"missing braces for blocks, e.g., if, for, while", "pts": 3},
    {"item":"bad indentation", "pts": 3},

    {"item":"poorly named function", "pts": 3},
    {"item":"missing cached variable, e.g., not caching DOM lookup", "pts": 3},
    {"item":"reassigning or multiply assigning variables", "pts": 3},
    {"item":"non-html code line length too long (more than about 120 characters)", "pts": 3},
    {"item":"too much white space (use white space for logical separations and promote grouping)", "pts": 3},
    {"item":"excessive use of DOM ids", "pts": 3},
    {"item":"missing clear abstraction usage opportunity", "pts": 3},

    {"item":"for loop used instead of more appropriate functional style", "pts": 3},
    {"item":"variable not appropriately initialized", "pts": 3},
    {"item":"did not use shortcut for boolean, i.e., if (bool == true) should be if (bool)", "pts": 3},
    {"item":"inappropriate character in filename, e.g., space", "pts": 3},
    {"item":"a 'what' comment, e.g., // set var to 0", "pts": 3},

    {"item":"multi-line comment where // should be used instead", "pts": 1},
    {"item":"long comment at end of line instead of on separate line", "pts": 1}

]}

]
