[
{"section":"Merits", "items": [
    {"item":"Everything works", "pts":3},
    {"item":"Single Page Application using Angular routing", "pts":5},
    {"item":"Content cards exist for non-logged in users", "pts":2},
    {"item":"At least these main views: landing, logged in, and profile edit", "pts":2},
    {"item":"Site has a consistent look and feel", "pts":2},
    {"item":"Layout is responsive, for every view", "pts":6},
    {"item":"New Posts appear at top of feed with submission timestamp", "pts": 2},
    {"item":"Post can be text or text with image", "pts":2},
    {"item":"New posts are persistent to log off and refresh", "pts":2},
    {"item":"Comment on a post", "pts":2},
    {"item":"Updating of status headline is persistent", "pts":2},
    {"item":"Profile edit page: update and persist email", "pts":1},
    {"item":"Profile edit page: update and persist zipode", "pts":1},
    {"item":"Profile edit page: upload and persist new profile picture", "pts":1},
    {"item":"Add and remove followed users", "pts":2},
    {"item":"Suitable message when trying to add user that does not exist", "pts":2},
    {"item":"No hard coded user data, all data comes from server", "pts":10},
    {"item":"Little or no use of jQuery or direct DOM access (use Angular)", "pts":3},
    {"item":"Post is implemented as an Angular directive", "pts":3},

    {"item":"Directory structure follows components, e.g., separate user and post dirs", "pts":2},
    {"item":"JavaScript source is appropriately divided into separate files by component", "pts":2},
    {"item":"Every JavaScript file has an associated Jasmine spec file", "pts":2},
    {"item":"Jasmine coverage results page included in submission", "pts":2},
    {"item":"Code coverage is close to or greater than 70%", "pts":10},
    {"item":"Unit tests are small tests of individual units of functionality", "pts":5},
    {"item":"End-to-End Test: Register new user", "pts":2},
    {"item":"End-to-End Test: Validate number of posts as non-logged-in user", "pts":2},
    {"item":"End-to-End Test: login as test user", "pts":2},
    {"item":"End-to-End Test: Create new post and validate post appears in feed", "pts":2},
    {"item":"End-to-End Test: Update status headline and verify change", "pts":2},
    {"item":"End-to-End Test: Add the Follower user and verify count increases by one", "pts":2},
    {"item":"End-to-End Test: Remove the Follower user and verify count decreases by one, test should be safe, i.e., what if Follower is not being followed", "pts":2},
    {"item":"End-to-End Test: Search for special post and verify author", "pts":2},
    {"item":"End-to-End Test: Update user email and verify", "pts":2},
    {"item":"End-to-End Test: Update user zipcode and verify", "pts":2},
    {"item":"End-to-End Test: Update user password and verify", "pts":2},
    {"item":"End-to-End Test: JUnitXML report included in submission", "pts":2}
]},
{"section":"Demerits", "items": [

    {"item":"code smells bad or has some issue", "pts": 10},
    {"item":"sections of code repeated more than twice (i.e., it's not DRY code)", "pts": 10},
    {"item":"variable not appropriately scoped (i.e., missing var, or var in wrong scope)", "pts": 10},
    {"item":"fat Angular Controller", "pts":10},
    {"item":"did not properly separate concerns", "pts": 10},
    {"item":"user interface not obvious to use", "pts": 10},
    {"item":"a non-server error is thrown", "pts": 8},
    {"item":"lingering console message", "pts": 5},
    {"item":"bad variable name", "pts": 5},

    {"item":"bad datastructure choice or usage", "pts": 5},
    {"item":"inappropriate use of new", "pts": 5},
    {"item":"improper use of comments", "pts": 5},
    {"item":"dead code, e.g., commented or unreachable code", "pts": 5},
    {"item":"code makes unchecked assumption", "pts": 5},
    {"item":"non-CSS styling", "pts": 5},

    {"item":"inefficient algorithm", "pts": 5},
    {"item":"poor implementation", "pts": 5},
    {"item":"expensive network load", "pts": 5},
    {"item":"JavaScript file has too many lines of code (more than about 500 lines)", "pts": 5},
    {"item":"JavaScript file inappropriately has too few lines of code (should be at least 5 lines otherwise combine with another file)", "pts": 5},
    {"item":"function length is too long (more than about 60 lines)", "pts": 5},
    {"item":"function performs too many functions", "pts": 5},
    {"item":"complex code statement (should be broken up or is missing appropriate comment)", "pts": 5},

    {"item":"unnecessary intermixing of content (HTML) and style (CSS)", "pts": 5},
    {"item":"unnecessary intermixing of content (HTML) and logic (JavaScript)", "pts": 5},

    {"item":"inappropriate magic value", "pts": 3},
    {"item":"missing braces for blocks, e.g., if, for, while", "pts": 3},
    {"item":"bad indentation", "pts": 3},

    {"item":"poorly named function", "pts": 3},
    {"item":"missing cached variable, e.g., not caching DOM lookup", "pts": 3},
    {"item":"reassigning or multiply assigning variables", "pts": 3},
    {"item":"code line length too long (more than about 80 characters)", "pts": 3},
    {"item":"too much white space (use white space for logical separations and promote grouping)", "pts": 3},
    {"item":"excessive use of DOM ids", "pts": 3},
    {"item":"missing clear abstraction usage opportunity", "pts": 3},

    {"item":"for loop used instead of more appropriate functional style", "pts": 2},
    {"item":"variable not appropriately initialized", "pts": 2},
    {"item":"did not use shortcut for boolean, i.e., if (bool == true) should be if (bool)", "pts": 2},
    {"item":"inappropriate character in filename, e.g., space", "pts": 2},
    {"item":"a 'what' comment, e.g., // set var to 0", "pts": 2},

    {"item":"multi-line comment where // should be used instead", "pts": 1},
    {"item":"long comment at end of line instead of on separate line", "pts": 1}

]}

]
