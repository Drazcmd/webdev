[
{"section":"Merits", "items": [
    {"item":"README.txt file with netid, frontend and backend URLs", "pts":1},
    {"item":"AutoGrader: bad creds do not login", "pts":1},
    {"item":"AutoGrader: test user can login with 3-word passphrase", "pts":1},
    {"item":"AutoGrader: logged out user cannot access content", "pts":3},
    {"item":"AutoGrader: test user sees at least 10 articles", "pts":1},
    {"item":"AutoGrader: test user sees at least 3 comments", "pts":1},
    {"item":"AutoGrader: register a new account", "pts":3},
    {"item":"AutoGrader: login as new account", "pts":3},
    {"item":"AutoGrader: Add a article", "pts":3},
    {"item":"AutoGrader: Backend GET /articles/id works as expected", "pts":3},
    {"item":"AutoGrader: New articles appear in GET /articles", "pts":3},    
    {"item":"AutoGrader: articles are persistent across multiple days", "pts":5},
    {"item":"AutoGrader: Edit article", "pts":3},
    {"item":"AutoGrader: Add comment to a article", "pts":3},    
    {"item":"AutoGrader: Edit comment", "pts":3},
    {"item":"AutoGrader: update headline", "pts":3},
    {"item":"AutoGrader: add and remove followed users", "pts":3},
    {"item":"AutoGrader: update email and zipcode", "pts":3},
    {"item":"AutoGrader: GET avatar works", "pts":3},
    {"item":"AutoGrader: Update password", "pts":3},
    {"item":"Frontend: can register new user and login", "pts": 3},
    {"item":"Frontend: Make article with text.  New article is at top of feed, refresh persistent", "pts":3},    
    {"item":"Frontend: add and remove followers", "pts":3},
    {"item":"Frontend: Suitable message when trying to add user that does not exist", "pts":3 },
    {"item":"Backend: Enabled CORS correctly, no hardcoded address or glob", "pts":5},
    {"item":"Backend: MongoDB has at least three collections: users, articles, profiles", "pts":10},    
    {"item":"Backend: In memory map or redis for session handling", "pts":5},
    {"item":"Backend: Session id is stored as httpOnly cookie", "pts":3},
    {"item":"Backend: User passwords are hashed and salted using md5 or encrypted with bcrypt", "pts":3}, 
    {"item":"Backend: User can change password, they get a new salt", "pts": 3 },
    {"item":"Backend: isLoggedIn middleware is exported from auth.js and applied to routes", "pts": 5 },
    {"item":"Backend: stub for PUT /avatar", "pts":1},
    {"item":"JavaScript source is appropriately divided into separate files by component", "pts":1}
]},

{"section":"Demerits", "items": [
    {"item":"late submission 10pts per day", "pts": 10},

    {"item":"did not follow Redux tutorial in implementation details", "pts": 25},
    {"item":"stateful component", "pts":25},
    {"item":"business logic in component", "pts":20},
    {"item":"non-functional approach, e.g., for-loop, for-in, while", "pts": 15},
    {"item":"fat React component instead of simple function", "pts": 15},
    {"item":"did not use fetch or wrapped fetch (aka resource) for AJAX calls", "pts": 10},
    {"item":"state mutation", "pts": 10},
    {"item":"submitted .git or node_modules directory", "pts":10},
    {"item":"submitted bundle.js file", "pts":10},    

    {"item":"expensive service call, such as loadarticles after the initial load", "pts":5},
    {"item":"unapproved third party module", "pts": 20},
    
    {"item":"code smells bad or has some issue", "pts": 10},
    {"item":"sections of code repeated more than twice (i.e., it's not DRY code)", "pts": 10},
    {"item":"variable not appropriately scoped (i.e., in wrong scope)", "pts": 10},
    {"item":"did not properly separate concerns", "pts": 10},
    {"item":"user interface not obvious to use", "pts": 10},
    {"item":"a non-server error is thrown", "pts": 8},
    {"item":"lingering console message (outside possible React/Redux warnings)", "pts": 5},
    {"item":"Redux logging left on", "pts": 5},
    {"item":"usage of forceUpdate in React component", "pts": 5},
    {"item":"bad variable name", "pts": 5},
    
    {"item":"bad datastructure choice or usage", "pts": 5},
    {"item":"inappropriate use of new", "pts": 5},
    {"item":"improper use of comments", "pts": 5},
    {"item":"no comments at all (you should have describing comments to explain why you are doing things the way you are doing them)", "pts": 5},
    {"item":"dead code, e.g., commented or unreachable code", "pts": 5},
    {"item":"code makes unchecked assumption", "pts": 5},
    {"item":"non-CSS styling", "pts": 5},

    {"item":"inefficient algorithm", "pts": 5},
    {"item":"poor implementation", "pts": 5},
    {"item":"expensive network load", "pts": 5},
    {"item":"JavaScript file has too many lines of code (more than about 500 lines)", "pts": 5},
    {"item":"JavaScript file inappropriately has too few lines of code (should be at least 5 lines otherwise combine with another file)", "pts": 5},
    {"item":"function length is too long (more than about 60 lines)", "pts": 5},
    {"item":"function performs too many functions", "pts": 5},
    {"item":"complex code statement (should be broken up or is missing appropriate comment)", "pts": 5},

    {"item":"unnecessary intermixing of content (HTML) and style (CSS)", "pts": 5},
    {"item":"unnecessary intermixing of content (HTML) and logic (JavaScript)", "pts": 5},

    {"item":"inappropriate magic value", "pts": 3},
    {"item":"missing braces for blocks, e.g., if, for, while", "pts": 3},
    {"item":"bad indentation", "pts": 3},

    {"item":"poorly named function", "pts": 3},
    {"item":"missing cached variable, e.g., not caching DOM lookup", "pts": 3},
    {"item":"reassigning or multiply assigning variables", "pts": 3},
    {"item":"non-html code line length too long (more than about 120 characters)", "pts": 3},
    {"item":"too much white space (use white space for logical separations and promote grouping)", "pts": 3},
    {"item":"excessive use of DOM ids", "pts": 3},
    {"item":"missing clear abstraction usage opportunity", "pts": 3},

    {"item":"for loop used instead of more appropriate functional style", "pts": 2},
    {"item":"variable not appropriately initialized", "pts": 2},
    {"item":"did not use shortcut for boolean, i.e., if (bool == true) should be if (bool)", "pts": 2},
    {"item":"inappropriate character in filename, e.g., space", "pts": 2},
    {"item":"a 'what' comment, e.g., // set var to 0", "pts": 2},

    {"item":"multi-line comment where // should be used instead", "pts": 1},
    {"item":"long comment at end of line instead of on separate line", "pts": 1}

]}

]
